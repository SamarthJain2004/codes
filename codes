//nodejs_lambda
exports.handler = async (event) => {
    // Define the student's name. This can be customized or passed in the event if needed.
    const studentName = "Student Name";  // Replace "Student Name"

    // Construct the greeting message
    const message = `Hello_${studentName}`;

    // Return the message
    return {
        statusCode: 200,
        body: JSON.stringify({
            message: message
        })
    };
};

//TEST_js
{
    "studentName": "Alice",
    "key1": "value1",
    "key2": "value2",
    "key3": "value3"
}


//python_lambda
import json

def lambda_handler(event, context):
    # Retrieve the student name from the event, or use a default name if none is provided
    student_name = event.get("studentName", "Student")

    # Construct the greeting message
    message = f"Hello_{student_name}"

    # Return the message in JSON format
    return {
        "statusCode": 200,
        "body": json.dumps({
            "message": message
        })
    }
//TEST_python
{
    "studentName": "Alice",
    "key1": "value1",
    "key2": "value2",
    "key3": "value3"
}

//JAVA
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import java.util.Map;

public class HelloLambda implements RequestHandler<Map<String, String>, String> {
    
    @Override
    public String handleRequest(Map<String, String> event, Context context) {
        // Retrieve the student name from the event data, defaulting to "Student" if not provided
        String studentName = event.getOrDefault("studentName", "Student");
        return "Hello_" + studentName;
    }
}


//SonarQube Python
# Another Sample Python code for SonarQube testing

import datetime  # Unused import

# Function with complex logic (SonarQube should flag this)
def calculate_discount(price, customer_type):
    if price < 0:
        return "Price cannot be negative"
    
    discount = 0
    if customer_type == "regular":
        if price > 100:
            discount = price * 0.1
        elif price > 50:
            discount = price * 0.05
    elif customer_type == "premium":
        if price > 100:
            discount = price * 0.2
        elif price > 50:
            discount = price * 0.1
    else:
        return "Unknown customer type"
    
    final_price = price - discount
    return final_price

# Hardcoded values (SonarQube should flag this)
def get_user_info():
    name = "John Doe"  # Hardcoded name
    age = 30  # Hardcoded age
    print(f"User Info - Name: {name}, Age: {age}")
    return name, age

# Function name not following naming conventions
def PrintMessage():
    print("This message is printed from a function with a non-standard name")

# Test the functions
print(calculate_discount(120, "regular"))
print(calculate_discount(70, "premium"))
get_user_info()
PrintMessage()
